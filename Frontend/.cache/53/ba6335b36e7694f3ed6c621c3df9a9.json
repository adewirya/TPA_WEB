{"id":"node_modules/millify/dist/millify.js","dependencies":[{"name":"C:\\Users\\62822\\Documents\\Asslab\\TPA\\TPA Web\\Coding\\TPA_NK\\package.json","includedInParent":true,"mtime":1631712264240},{"name":"C:\\Users\\62822\\Documents\\Asslab\\TPA\\TPA Web\\Coding\\TPA_NK\\node_modules\\millify\\package.json","includedInParent":true,"mtime":1631267785127},{"name":"./options","loc":{"line":4,"column":26},"parent":"C:\\Users\\62822\\Documents\\Asslab\\TPA\\TPA Web\\Coding\\TPA_NK\\node_modules\\millify\\dist\\millify.js","resolved":"C:\\Users\\62822\\Documents\\Asslab\\TPA\\TPA Web\\Coding\\TPA_NK\\node_modules\\millify\\dist\\options.js"},{"name":"./utils","loc":{"line":5,"column":24},"parent":"C:\\Users\\62822\\Documents\\Asslab\\TPA\\TPA Web\\Coding\\TPA_NK\\node_modules\\millify\\dist\\millify.js","resolved":"C:\\Users\\62822\\Documents\\Asslab\\TPA\\TPA Web\\Coding\\TPA_NK\\node_modules\\millify\\dist\\utils.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.millify = void 0;\nconst options_1 = require(\"./options\");\nconst utils_1 = require(\"./utils\");\n// Most commonly used digit grouping base.\nconst DIGIT_GROUPING_BASE = 1000;\n/**\n * Generator that divides a number until a decimal value is found.\n *\n * The denominator is defined by the numerical digit grouping base,\n * or interval. The most commonly-used digit group interval is 1000.\n *\n * e.g. 1,000,000 is grouped in multiples of 1000.\n */\nfunction* divider(value) {\n    // Create a mutable copy of the base.\n    let denominator = DIGIT_GROUPING_BASE;\n    while (true) {\n        const result = value / denominator;\n        if (result < 1) {\n            // End of operation. We can't divide the value any further.\n            return;\n        }\n        yield result;\n        // The denominator is increased every iteration by multiplying\n        // the base by itself, until a decimal value remains.\n        denominator *= DIGIT_GROUPING_BASE;\n    }\n}\n/**\n * millify converts long numbers to human-readable strings.\n */\nfunction millify(value, options) {\n    var _a;\n    // Override default options with options supplied by user.\n    const opts = options\n        ? Object.assign(Object.assign({}, options_1.defaultOptions), options) : options_1.defaultOptions;\n    if (!Array.isArray(opts.units) || !opts.units.length) {\n        throw new Error(\"Option `units` must be a non-empty array\");\n    }\n    // Validate value for type and length.\n    let val = utils_1.parseValue(value);\n    // Add a minus sign (-) prefix if it's a negative number.\n    const prefix = val < 0 ? \"-\" : \"\";\n    // Work only with positive values for simplicity's sake.\n    val = Math.abs(val);\n    // Keep dividing the input value by the digit grouping base\n    // until the decimal and the unit index is deciphered.\n    let unitIndex = 0;\n    for (const result of divider(val)) {\n        val = result;\n        unitIndex += 1;\n    }\n    // Return the original number if the number is too large to have\n    // a corresponding unit. Returning anything else is ambiguous.\n    const unitIndexOutOfRange = unitIndex >= opts.units.length;\n    if (unitIndexOutOfRange) {\n        return value.toString();\n    }\n    // Round decimal up to desired precision.\n    let rounded = utils_1.roundTo(val, opts.precision);\n    // Fixes an edge case bug that outputs certain numbers as 1000K instead of 1M.\n    // The rounded value needs another iteration in the divider cycle.\n    for (const result of divider(rounded)) {\n        rounded = result;\n        unitIndex += 1;\n    }\n    // Calculate the unit suffix and make it lowercase (if needed).\n    const unit = (_a = opts.units[unitIndex]) !== null && _a !== void 0 ? _a : \"\";\n    const suffix = opts.lowercase ? unit.toLowerCase() : unit;\n    // Add a space between number and abbreviation.\n    const space = opts.space ? \" \" : \"\";\n    // Replace decimal mark if desired.\n    const formatted = rounded\n        .toString()\n        .replace(options_1.defaultOptions.decimalSeparator, opts.decimalSeparator);\n    return `${prefix}${formatted}${space}${suffix}`;\n}\nexports.millify = millify;\nexports.default = millify;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/millify/dist/millify.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/millify/dist/millify.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}}],"sources":{"node_modules/millify/dist/millify.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.millify = void 0;\nconst options_1 = require(\"./options\");\nconst utils_1 = require(\"./utils\");\n// Most commonly used digit grouping base.\nconst DIGIT_GROUPING_BASE = 1000;\n/**\n * Generator that divides a number until a decimal value is found.\n *\n * The denominator is defined by the numerical digit grouping base,\n * or interval. The most commonly-used digit group interval is 1000.\n *\n * e.g. 1,000,000 is grouped in multiples of 1000.\n */\nfunction* divider(value) {\n    // Create a mutable copy of the base.\n    let denominator = DIGIT_GROUPING_BASE;\n    while (true) {\n        const result = value / denominator;\n        if (result < 1) {\n            // End of operation. We can't divide the value any further.\n            return;\n        }\n        yield result;\n        // The denominator is increased every iteration by multiplying\n        // the base by itself, until a decimal value remains.\n        denominator *= DIGIT_GROUPING_BASE;\n    }\n}\n/**\n * millify converts long numbers to human-readable strings.\n */\nfunction millify(value, options) {\n    var _a;\n    // Override default options with options supplied by user.\n    const opts = options\n        ? Object.assign(Object.assign({}, options_1.defaultOptions), options) : options_1.defaultOptions;\n    if (!Array.isArray(opts.units) || !opts.units.length) {\n        throw new Error(\"Option `units` must be a non-empty array\");\n    }\n    // Validate value for type and length.\n    let val = utils_1.parseValue(value);\n    // Add a minus sign (-) prefix if it's a negative number.\n    const prefix = val < 0 ? \"-\" : \"\";\n    // Work only with positive values for simplicity's sake.\n    val = Math.abs(val);\n    // Keep dividing the input value by the digit grouping base\n    // until the decimal and the unit index is deciphered.\n    let unitIndex = 0;\n    for (const result of divider(val)) {\n        val = result;\n        unitIndex += 1;\n    }\n    // Return the original number if the number is too large to have\n    // a corresponding unit. Returning anything else is ambiguous.\n    const unitIndexOutOfRange = unitIndex >= opts.units.length;\n    if (unitIndexOutOfRange) {\n        return value.toString();\n    }\n    // Round decimal up to desired precision.\n    let rounded = utils_1.roundTo(val, opts.precision);\n    // Fixes an edge case bug that outputs certain numbers as 1000K instead of 1M.\n    // The rounded value needs another iteration in the divider cycle.\n    for (const result of divider(rounded)) {\n        rounded = result;\n        unitIndex += 1;\n    }\n    // Calculate the unit suffix and make it lowercase (if needed).\n    const unit = (_a = opts.units[unitIndex]) !== null && _a !== void 0 ? _a : \"\";\n    const suffix = opts.lowercase ? unit.toLowerCase() : unit;\n    // Add a space between number and abbreviation.\n    const space = opts.space ? \" \" : \"\";\n    // Replace decimal mark if desired.\n    const formatted = rounded\n        .toString()\n        .replace(options_1.defaultOptions.decimalSeparator, opts.decimalSeparator);\n    return `${prefix}${formatted}${space}${suffix}`;\n}\nexports.millify = millify;\nexports.default = millify;\n"},"lineCount":82}},"error":null,"hash":"cd93c0d1545b759267905988f20a78d4","cacheData":{"env":{}}}